// __multiversion__
// This shader is from the Gameface library modified to work in the
// Bedrock engine and heavily depends on Gameface's functionality, why
// some numbers and values seem arbitrary or "magic".

#include "fragmentVersionSimple.h"
#include "uniformMacro.h"

#include "uniformUITextPSConstants.h"

varying vec4 ColorOut;
varying vec4 AdditionalOut;
// We need this here even if we do not use it as some drivers require
// the verying variables to match between the vertex and fragment shaders.
varying vec3 ScreenNormalPosition;

LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;

float GetLuminance(vec3 color) {
	return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}

void main() {
	float dfValue = texture2D(TEXTURE_1, AdditionalOut.xy).r;

	if (BITMAP >= 0.5) {
		vec4 fragColor = vec4(dfValue);

		const float center = 0.4;
		const float radius = 0.1;
		fragColor = smoothstep(center - radius, center + radius, fragColor);
	
		fragColor = ColorOut * fragColor;

		gl_FragColor = fragColor;		
	} else {
		float lum = 1.45 - GetLuminance(ColorOut.xyz);
		vec4 fragColor = ColorOut * pow(dfValue, lum);

		gl_FragColor = fragColor;		
	}
}
