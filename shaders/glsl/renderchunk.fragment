// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying vec4 color;
varying vec3 position;
varying vec3 wpos;

#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "util.h"
uniform vec2 FOG_CONTROL;
uniform vec4 FOG_COLOR;
uniform float RENDER_DISTANCE;
uniform float TIME;

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

bool nether = (FOG_COLOR.r>FOG_COLOR.b && FOG_COLOR.r<0.5 && FOG_COLOR.b<0.2);

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

vec4 diff2 = texture2D( TEXTURE_1, uv1 );
vec3 night = vec3(0.03,0.1,1.1);

diff2.rgb *= pow(diff2.rgb , 1.0 - night);

#if !defined(ALWAYS_LIT)
	diffuse *= diff2;
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

diffuse.rgb *= vec3(1.8,1.9,2.0);

if(color.g<0.64 || uv1.y<0.874){diffuse.rgb *= vec3(0.98)+uv1.x*vec3(0.02);}
if(color.g<0.63 || uv1.y<0.873){diffuse.rgb *= vec3(0.94)+uv1.x*vec3(0.06);}
if(color.g<0.62 || uv1.y<0.872){diffuse.rgb *= vec3(0.88)+uv1.x*vec3(0.12);}
if(color.g<0.61 || uv1.y<0.871){diffuse.rgb *= vec3(0.8)+uv1.x*vec3(0.2);}


if(color.a != 0.0){
if(color.g<0.64 || uv1.y<0.874){diffuse.rgb *= vec3(0.98)+uv1.x*vec3(0.02);}
if(color.g<0.63 || uv1.y<0.873){diffuse.rgb *= vec3(0.94)+uv1.x*vec3(0.06);}
if(color.g<0.62 || uv1.y<0.872){diffuse.rgb *= vec3(0.88)+uv1.x*vec3(0.12);}
if(color.g<0.61 || uv1.y<0.871){diffuse.rgb *= vec3(0.8)+uv1.x*vec3(0.2);}
}

if(color.a==0.0){
diffuse.rgb *= 1.25;
diffuse.rgb *= color.g*1.3;
}

diffuse.rgb += diffuse.rgb*(vec3(1.5,0.3,0.0)*1.14)*pow(uv1.x*1.04,5.8);

float rain_detect = 1.0-pow(FOG_CONTROL.y, 11.0);
diffuse.rgb += vec3(-0.2,-0.15,-0.1);

if(uv1.y>0.875){
if(fract(position.y)==0.0){
diffuse.rgb += sin(position.x+position.y+position.z)*0.10*rain_detect;
}}

vec3 fog = mix(diffuse.rgb, FOG_COLOR.rgb*vec3(0.65,0.65,1.2), clamp(length(-wpos)/RENDER_DISTANCE*1.5,0.0,0.6));

diffuse.rgb = fog;

if(nether==true){
diffuse.rgb *= vec3(1.5,1.0,1.0);

vec3 nether_fog = mix(diffuse.rgb, FOG_COLOR.rgb*vec3(5.5,5.5,5.5), clamp(length(-wpos)/RENDER_DISTANCE*1.5,0.0,0.6));

diffuse.rgb = nether_fog;

}

if(nether==false){
if(FOG_CONTROL.x==0.0){

diffuse.rgb *= vec3(0.05,0.55,0.95);

diffuse.rgb += diffuse.rgb*(vec3(-1.5,0.0,1.5)*1.15)*pow(uv1.x*1.1,4.0);


}}

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif

	gl_FragColor = diffuse;
	
#endif // BYPASS_PIXEL_SHADER
}