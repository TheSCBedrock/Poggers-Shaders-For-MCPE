// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying vec4 color;

#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "util.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

vec4 diff2 = texture2D( TEXTURE_1, uv1 );
vec3 night = vec3(0.05,0.1,1.0);

diff2.rgb *= pow(diff2.rgb , 1.0 - night);

#if !defined(ALWAYS_LIT)
	diffuse *= diff2;
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

diffuse.rgb *= vec3(1.9,1.8,1.7);

if(uv1.y<0.875){diffuse.rgb *= vec3(0.76,0.76,0.81)+uv1.x*vec3(0.24,0.24,0.19);}
if(uv1.y<0.873){diffuse.rgb *= vec3(0.72,0.72,0.77)+uv1.x*vec3(0.28,0.28,0.23);}
if(uv1.y<0.871){diffuse.rgb *= vec3(0.68,0.68,0.73)+uv1.x*vec3(0.32,0.32,0.27);}
if(uv1.y<0.869){diffuse.rgb *= vec3(0.6,0.6,0.65)+uv1.x*vec3(0.4,0.4,0.35);}


if(color.a != 0.0){
if(color.g<0.64){diffuse.rgb *= vec3(0.76,0.76,0.81)+uv1.x*vec3(0.24,0.24,0.19);}
if(color.g<0.63){diffuse.rgb *= vec3(0.72,0.72,0.77)+uv1.x*vec3(0.28,0.28,0.23);}
if(color.g<0.62){diffuse.rgb *= vec3(0.68,0.68,0.73)+uv1.x*vec3(0.32,0.32,0.27);}
if(color.g<0.61){diffuse.rgb *= vec3(0.6,0.6,0.65)+uv1.x*vec3(0.4,0.4,0.35);}
}

if(color.a==0.0){
diffuse.rgb *= 1.25;
diffuse.rgb *= color.g*1.3;
}

diffuse.rgb += diffuse.rgb*(vec3(1.5,0.5,0.0)*1.15)*pow(uv1.x*1.05,6.0);

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif

	gl_FragColor = diffuse;
	
#endif // BYPASS_PIXEL_SHADER
}